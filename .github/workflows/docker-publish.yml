name: Build_And_Publish

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [master]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
  pull_request:
    branches: [master]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  SIMPLELB_IMAGE_NAME: ${{ github.repository }}
  SIMPLELB_PORTFORWARD_IMAGE_NAME: ${{ github.repository }}-portforward
  
  SIMPLELB_HELM_IMAGE_NAME: ${{ github.repository }}-helm

jobs:
  build-simplelb:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.SIMPLELB_IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-simplelb-portforward:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.SIMPLELB_PORTFORWARD_IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./build-portforward/
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  publish-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Release information
        id: info
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          SHA="${{ github.sha }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.SIMPLELB_IMAGE_NAME }}:${VERSION}"
          IMAGE_PORTFORWARD="${{ env.REGISTRY }}/${{ env.SIMPLELB_PORTFORWARD_IMAGE_NAME }}:${VERSION}"
          IMAGE_HELM="${{ env.REGISTRY }}/${{ env.SIMPLELB_HELM_IMAGE_NAME }}:${VERSION}"

          echo ::set-output name=SHA::${SHA}
          echo ::set-output name=VERSION::${VERSION}
          echo ::set-output name=IMAGE::${IMAGE}
          echo ::set-output name=IMAGE_PORTFORWARD::${IMAGE_PORTFORWARD}
          echo ::set-output name=IMAGE_HELM::${IMAGE_HELM}

          # Template files
          sed \
            -e "s|\${SHA}|${SHA}|" \
            -e "s|\${VERSION}|${VERSION}|" \
            -e "s|\${IMAGE}|${IMAGE}|" \
            -e "s|\${IMAGE_PORTFORWARD}|${IMAGE_PORTFORWARD}|" \
            -e "s|\${IMAGE_HELM}|${IMAGE_HELM}|" \
            ./deploy/chart/README.tmpl.md \
            > ./deploy/chart/README.md

          sed \
            -e "s|\${SHA}|${SHA}|" \
            -e "s|\${VERSION}|${VERSION}|" \
            -e "s|\${IMAGE}|${IMAGE}|" \
            -e "s|\${IMAGE_PORTFORWARD}|${IMAGE_PORTFORWARD}|" \
            -e "s|\${IMAGE_HELM}|${IMAGE_HELM}|" \
            ./deploy/RELEASE_NOTES.tmpl.md \
            > ./deploy/RELEASE_NOTES.md

      - name: Render manifest
        id: generate
        run: |
          ./hack/helm.sh package ./deploy/chart/ \
            --app-version=${{ steps.info.outputs.VERSION }} \
            --version=${{ steps.info.outputs.VERSION }}

          tgz_files=( *.tgz )
          HELM_RELEASE="${tgz_files[0]}"
          echo ::set-output name=HELM_RELEASE::${HELM_RELEASE}

          ./hack/helm.sh template simplelb ${HELM_RELEASE} \
            --set imageSimplelb=${{ steps.info.outputs.IMAGE }} \
            --set imageSimplelbPortforward=${{ steps.info.outputs.IMAGE_PORTFORWARD }} \
            > simplelb.yaml
      
      - name: Publish helm chart
        run: |
          echo "$TOKEN" | ./hack/helm.sh registry login -u $USER --password-stdin $REGISTRY
          ./hack/helm.sh push ${{ steps.generate.outputs.HELM_RELEASE }} "oci://${{ env.REGISTRY }}/${{ env.SIMPLELB_HELM_IMAGE_NAME }}"
        env:
          USER: ${{ github.actor }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REGISTRY: ${{ env.REGISTRY }}

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "simplelb.yaml,${{ steps.generate.outputs.HELM_RELEASE }},LICENSE"
          bodyFile: ./deploy/RELEASE_NOTES.md
          token: ${{ secrets.GITHUB_TOKEN }}
